{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPcC4cfICWX5Ok93om5odaX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "189ec4c2ddcb4069a4d6a95c4c5e59d5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_06e9e125de6a48af97e43158a5321d47",
              "IPY_MODEL_f4bebaaf370044ae9b3934eeadca562d",
              "IPY_MODEL_285939f52c7f4340b2d1a7dfbaedf690"
            ],
            "layout": "IPY_MODEL_bcd3d2090939497fae483516c8c1fb12"
          }
        },
        "06e9e125de6a48af97e43158a5321d47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_df62b6b679fd4acc99d339d74fc5de21",
            "placeholder": "​",
            "style": "IPY_MODEL_668f2ea3f9d34044800ba0013e04a4d4",
            "value": "Processing: 100%"
          }
        },
        "f4bebaaf370044ae9b3934eeadca562d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6019492b7b2f498089232d6959fe28b3",
            "max": 81,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_304b33fbad804019826b63cea249fb83",
            "value": 81
          }
        },
        "285939f52c7f4340b2d1a7dfbaedf690": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_84ccddef2a3d491b9e01c926cfd8d291",
            "placeholder": "​",
            "style": "IPY_MODEL_e32dc88d7f8047dcacdc8a54d44b4041",
            "value": " 81/81 [00:31&lt;00:00,  3.40it/s]"
          }
        },
        "bcd3d2090939497fae483516c8c1fb12": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "df62b6b679fd4acc99d339d74fc5de21": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "668f2ea3f9d34044800ba0013e04a4d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6019492b7b2f498089232d6959fe28b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "304b33fbad804019826b63cea249fb83": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "84ccddef2a3d491b9e01c926cfd8d291": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e32dc88d7f8047dcacdc8a54d44b4041": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/funbeeeeee/hackbio/blob/main/Drug%20development%20stage%204%20phase%201%20supplementary%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Add necessary libraries\n",
        "!pip install chembl-webresource-client\n",
        "!pip install rdkit-pypi\n",
        "!pip install mordred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-cPnue-g13hU",
        "outputId": "9717e326-d707-4c59-b13b-1aee8bf80abe"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: chembl-webresource-client in /usr/local/lib/python3.10/dist-packages (0.10.9)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from chembl-webresource-client) (2.2.3)\n",
            "Requirement already satisfied: requests>=2.18.4 in /usr/local/lib/python3.10/dist-packages (from chembl-webresource-client) (2.32.3)\n",
            "Requirement already satisfied: requests-cache~=1.2 in /usr/local/lib/python3.10/dist-packages (from chembl-webresource-client) (1.2.1)\n",
            "Requirement already satisfied: easydict in /usr/local/lib/python3.10/dist-packages (from chembl-webresource-client) (1.13)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->chembl-webresource-client) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->chembl-webresource-client) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->chembl-webresource-client) (2024.8.30)\n",
            "Requirement already satisfied: attrs>=21.2 in /usr/local/lib/python3.10/dist-packages (from requests-cache~=1.2->chembl-webresource-client) (24.2.0)\n",
            "Requirement already satisfied: cattrs>=22.2 in /usr/local/lib/python3.10/dist-packages (from requests-cache~=1.2->chembl-webresource-client) (24.1.2)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-cache~=1.2->chembl-webresource-client) (4.3.6)\n",
            "Requirement already satisfied: url-normalize>=1.4 in /usr/local/lib/python3.10/dist-packages (from requests-cache~=1.2->chembl-webresource-client) (1.4.3)\n",
            "Requirement already satisfied: exceptiongroup>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from cattrs>=22.2->requests-cache~=1.2->chembl-webresource-client) (1.2.2)\n",
            "Requirement already satisfied: typing-extensions!=4.6.3,>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from cattrs>=22.2->requests-cache~=1.2->chembl-webresource-client) (4.12.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from url-normalize>=1.4->requests-cache~=1.2->chembl-webresource-client) (1.16.0)\n",
            "Requirement already satisfied: rdkit-pypi in /usr/local/lib/python3.10/dist-packages (2022.9.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rdkit-pypi) (1.26.4)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from rdkit-pypi) (10.4.0)\n",
            "Requirement already satisfied: mordred in /usr/local/lib/python3.10/dist-packages (1.2.0)\n",
            "Requirement already satisfied: six==1.* in /usr/local/lib/python3.10/dist-packages (from mordred) (1.16.0)\n",
            "Requirement already satisfied: numpy==1.* in /usr/local/lib/python3.10/dist-packages (from mordred) (1.26.4)\n",
            "Requirement already satisfied: networkx==2.* in /usr/local/lib/python3.10/dist-packages (from mordred) (2.8.8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from chembl_webresource_client.new_client import new_client\n",
        "import numpy as np\n",
        "import rdkit\n",
        "from rdkit.Chem import Descriptors, Lipinski\n",
        "from rdkit.Chem import AllChem\n",
        "from rdkit import Chem\n",
        "from rdkit.Chem import Descriptors\n",
        "from rdkit.ML.Descriptors import MoleculeDescriptors\n",
        "from mordred import Calculator, descriptors\n"
      ],
      "metadata": {
        "id": "D9DG8OI62CBc"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " #prompt: upload excel file\n",
        "\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "for fn in uploaded.keys():\n",
        "  print('User uploaded file \"{name}\" with length {length} bytes'.format(\n",
        "      name=fn, length=len(uploaded[fn])))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "id": "MVA8QEgd2MSw",
        "outputId": "d24bdcf0-1731-4a92-e89c-4768553b5bc1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8c1f389b-9df9-408a-ae44-add573dfeed4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8c1f389b-9df9-408a-ae44-add573dfeed4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving GDSC1_fitted_dose_response_27Oct23.xlsx to GDSC1_fitted_dose_response_27Oct23 (1).xlsx\n",
            "User uploaded file \"GDSC1_fitted_dose_response_27Oct23 (1).xlsx\" with length 29353210 bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: create dataframe for GDSC1_fitted_does_resonse_27Oct23.xlsx\n",
        "\n",
        "import io\n",
        "\n",
        "df = pd.read_excel(io.BytesIO(uploaded['GDSC1_fitted_dose_response_27Oct23 (1).xlsx']))"
      ],
      "metadata": {
        "id": "Vn-AgVORBgFp"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#View DataFrame\n",
        "df.head()\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "ae3axEL_4O07",
        "outputId": "ab53f27c-c26e-4f22-a324-bdef1d5317b5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  DATASET  NLME_RESULT_ID  NLME_CURVE_ID  COSMIC_ID CELL_LINE_NAME  \\\n",
              "0   GDSC1             342       15580432     684057            ES5   \n",
              "1   GDSC1             342       15580806     684059            ES7   \n",
              "2   GDSC1             342       15581198     684062          EW-11   \n",
              "3   GDSC1             342       15581542     684072        SK-ES-1   \n",
              "4   GDSC1             342       15581930     687448       COLO-829   \n",
              "\n",
              "  SANGER_MODEL_ID     TCGA_DESC  DRUG_ID  DRUG_NAME PUTATIVE_TARGET  \\\n",
              "0       SIDM00263  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "1       SIDM00269  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "2       SIDM00203  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "3       SIDM01111  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "4       SIDM00909          SKCM        1  Erlotinib            EGFR   \n",
              "\n",
              "     PATHWAY_NAME  COMPANY_ID WEBRELEASE  MIN_CONC  MAX_CONC   LN_IC50  \\\n",
              "0  EGFR signaling        1045          Y  0.007813       2.0  3.966813   \n",
              "1  EGFR signaling        1045          Y  0.007813       2.0  2.692090   \n",
              "2  EGFR signaling        1045          Y  0.007813       2.0  2.477990   \n",
              "3  EGFR signaling        1045          Y  0.007813       2.0  2.033564   \n",
              "4  EGFR signaling        1045          Y  0.007813       2.0  2.966007   \n",
              "\n",
              "        AUC      RMSE   Z_SCORE  \n",
              "0  0.985678  0.026081  1.299144  \n",
              "1  0.972690  0.110059  0.156076  \n",
              "2  0.944459  0.087019 -0.035912  \n",
              "3  0.950758  0.016290 -0.434437  \n",
              "4  0.954778  0.180255  0.401702  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c684df3-75e3-4d46-b064-7818683dd756\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATASET</th>\n",
              "      <th>NLME_RESULT_ID</th>\n",
              "      <th>NLME_CURVE_ID</th>\n",
              "      <th>COSMIC_ID</th>\n",
              "      <th>CELL_LINE_NAME</th>\n",
              "      <th>SANGER_MODEL_ID</th>\n",
              "      <th>TCGA_DESC</th>\n",
              "      <th>DRUG_ID</th>\n",
              "      <th>DRUG_NAME</th>\n",
              "      <th>PUTATIVE_TARGET</th>\n",
              "      <th>PATHWAY_NAME</th>\n",
              "      <th>COMPANY_ID</th>\n",
              "      <th>WEBRELEASE</th>\n",
              "      <th>MIN_CONC</th>\n",
              "      <th>MAX_CONC</th>\n",
              "      <th>LN_IC50</th>\n",
              "      <th>AUC</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>Z_SCORE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15580432</td>\n",
              "      <td>684057</td>\n",
              "      <td>ES5</td>\n",
              "      <td>SIDM00263</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.966813</td>\n",
              "      <td>0.985678</td>\n",
              "      <td>0.026081</td>\n",
              "      <td>1.299144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15580806</td>\n",
              "      <td>684059</td>\n",
              "      <td>ES7</td>\n",
              "      <td>SIDM00269</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.692090</td>\n",
              "      <td>0.972690</td>\n",
              "      <td>0.110059</td>\n",
              "      <td>0.156076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581198</td>\n",
              "      <td>684062</td>\n",
              "      <td>EW-11</td>\n",
              "      <td>SIDM00203</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.477990</td>\n",
              "      <td>0.944459</td>\n",
              "      <td>0.087019</td>\n",
              "      <td>-0.035912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581542</td>\n",
              "      <td>684072</td>\n",
              "      <td>SK-ES-1</td>\n",
              "      <td>SIDM01111</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.033564</td>\n",
              "      <td>0.950758</td>\n",
              "      <td>0.016290</td>\n",
              "      <td>-0.434437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581930</td>\n",
              "      <td>687448</td>\n",
              "      <td>COLO-829</td>\n",
              "      <td>SIDM00909</td>\n",
              "      <td>SKCM</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.966007</td>\n",
              "      <td>0.954778</td>\n",
              "      <td>0.180255</td>\n",
              "      <td>0.401702</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c684df3-75e3-4d46-b064-7818683dd756')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c684df3-75e3-4d46-b064-7818683dd756 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c684df3-75e3-4d46-b064-7818683dd756');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a95fa418-62c5-45db-baf8-215c235c654b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a95fa418-62c5-45db-baf8-215c235c654b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a95fa418-62c5-45db-baf8-215c235c654b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "Wut-UB0m4YSX",
        "outputId": "996d7094-95cc-4499-b7e1-6ddfac2f58c7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       DATASET  NLME_RESULT_ID  NLME_CURVE_ID  COSMIC_ID CELL_LINE_NAME  \\\n",
              "0        GDSC1             342       15580432     684057            ES5   \n",
              "1        GDSC1             342       15580806     684059            ES7   \n",
              "2        GDSC1             342       15581198     684062          EW-11   \n",
              "3        GDSC1             342       15581542     684072        SK-ES-1   \n",
              "4        GDSC1             342       15581930     687448       COLO-829   \n",
              "...        ...             ...            ...        ...            ...   \n",
              "333156   GDSC1             342       15911377    1659823       SNU-1040   \n",
              "333157   GDSC1             342       15912122    1660035         SNU-61   \n",
              "333158   GDSC1             342       15912431    1660036         SNU-81   \n",
              "333159   GDSC1             342       15912739    1674021         SNU-C5   \n",
              "333160   GDSC1             342       15913046    1789883           DiFi   \n",
              "\n",
              "       SANGER_MODEL_ID     TCGA_DESC  DRUG_ID  DRUG_NAME PUTATIVE_TARGET  \\\n",
              "0            SIDM00263  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "1            SIDM00269  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "2            SIDM00203  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "3            SIDM01111  UNCLASSIFIED        1  Erlotinib            EGFR   \n",
              "4            SIDM00909          SKCM        1  Erlotinib            EGFR   \n",
              "...                ...           ...      ...        ...             ...   \n",
              "333156       SIDM00217        COREAD     1531   I-CBP112      EP300, CBP   \n",
              "333157       SIDM00194        COREAD     1531   I-CBP112      EP300, CBP   \n",
              "333158       SIDM00193        COREAD     1531   I-CBP112      EP300, CBP   \n",
              "333159       SIDM00498        COREAD     1531   I-CBP112      EP300, CBP   \n",
              "333160       SIDM00049        COREAD     1531   I-CBP112      EP300, CBP   \n",
              "\n",
              "                         PATHWAY_NAME  COMPANY_ID WEBRELEASE  MIN_CONC  \\\n",
              "0                      EGFR signaling        1045          Y  0.007813   \n",
              "1                      EGFR signaling        1045          Y  0.007813   \n",
              "2                      EGFR signaling        1045          Y  0.007813   \n",
              "3                      EGFR signaling        1045          Y  0.007813   \n",
              "4                      EGFR signaling        1045          Y  0.007813   \n",
              "...                               ...         ...        ...       ...   \n",
              "333156  Chromatin histone acetylation        1005          Y  0.039063   \n",
              "333157  Chromatin histone acetylation        1005          Y  0.039063   \n",
              "333158  Chromatin histone acetylation        1005          Y  0.039063   \n",
              "333159  Chromatin histone acetylation        1005          Y  0.039063   \n",
              "333160  Chromatin histone acetylation        1005          Y  0.039063   \n",
              "\n",
              "        MAX_CONC   LN_IC50       AUC      RMSE   Z_SCORE  \n",
              "0            2.0  3.966813  0.985678  0.026081  1.299144  \n",
              "1            2.0  2.692090  0.972690  0.110059  0.156076  \n",
              "2            2.0  2.477990  0.944459  0.087019 -0.035912  \n",
              "3            2.0  2.033564  0.950758  0.016290 -0.434437  \n",
              "4            2.0  2.966007  0.954778  0.180255  0.401702  \n",
              "...          ...       ...       ...       ...       ...  \n",
              "333156      10.0  5.085294  0.972251  0.040661  0.860626  \n",
              "333157      10.0  5.725399  0.976109  0.045453  1.785602  \n",
              "333158      10.0  4.930753  0.970851  0.038612  0.637308  \n",
              "333159      10.0  4.551784  0.972330  0.042649  0.089683  \n",
              "333160      10.0  4.681069  0.980906  0.015312  0.276505  \n",
              "\n",
              "[333161 rows x 19 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03661bf6-3b7b-40bb-935b-c6c36f56d284\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATASET</th>\n",
              "      <th>NLME_RESULT_ID</th>\n",
              "      <th>NLME_CURVE_ID</th>\n",
              "      <th>COSMIC_ID</th>\n",
              "      <th>CELL_LINE_NAME</th>\n",
              "      <th>SANGER_MODEL_ID</th>\n",
              "      <th>TCGA_DESC</th>\n",
              "      <th>DRUG_ID</th>\n",
              "      <th>DRUG_NAME</th>\n",
              "      <th>PUTATIVE_TARGET</th>\n",
              "      <th>PATHWAY_NAME</th>\n",
              "      <th>COMPANY_ID</th>\n",
              "      <th>WEBRELEASE</th>\n",
              "      <th>MIN_CONC</th>\n",
              "      <th>MAX_CONC</th>\n",
              "      <th>LN_IC50</th>\n",
              "      <th>AUC</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>Z_SCORE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15580432</td>\n",
              "      <td>684057</td>\n",
              "      <td>ES5</td>\n",
              "      <td>SIDM00263</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.966813</td>\n",
              "      <td>0.985678</td>\n",
              "      <td>0.026081</td>\n",
              "      <td>1.299144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15580806</td>\n",
              "      <td>684059</td>\n",
              "      <td>ES7</td>\n",
              "      <td>SIDM00269</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.692090</td>\n",
              "      <td>0.972690</td>\n",
              "      <td>0.110059</td>\n",
              "      <td>0.156076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581198</td>\n",
              "      <td>684062</td>\n",
              "      <td>EW-11</td>\n",
              "      <td>SIDM00203</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.477990</td>\n",
              "      <td>0.944459</td>\n",
              "      <td>0.087019</td>\n",
              "      <td>-0.035912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581542</td>\n",
              "      <td>684072</td>\n",
              "      <td>SK-ES-1</td>\n",
              "      <td>SIDM01111</td>\n",
              "      <td>UNCLASSIFIED</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.033564</td>\n",
              "      <td>0.950758</td>\n",
              "      <td>0.016290</td>\n",
              "      <td>-0.434437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15581930</td>\n",
              "      <td>687448</td>\n",
              "      <td>COLO-829</td>\n",
              "      <td>SIDM00909</td>\n",
              "      <td>SKCM</td>\n",
              "      <td>1</td>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>EGFR</td>\n",
              "      <td>EGFR signaling</td>\n",
              "      <td>1045</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.007813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.966007</td>\n",
              "      <td>0.954778</td>\n",
              "      <td>0.180255</td>\n",
              "      <td>0.401702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333156</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15911377</td>\n",
              "      <td>1659823</td>\n",
              "      <td>SNU-1040</td>\n",
              "      <td>SIDM00217</td>\n",
              "      <td>COREAD</td>\n",
              "      <td>1531</td>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>EP300, CBP</td>\n",
              "      <td>Chromatin histone acetylation</td>\n",
              "      <td>1005</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.039063</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.085294</td>\n",
              "      <td>0.972251</td>\n",
              "      <td>0.040661</td>\n",
              "      <td>0.860626</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333157</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15912122</td>\n",
              "      <td>1660035</td>\n",
              "      <td>SNU-61</td>\n",
              "      <td>SIDM00194</td>\n",
              "      <td>COREAD</td>\n",
              "      <td>1531</td>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>EP300, CBP</td>\n",
              "      <td>Chromatin histone acetylation</td>\n",
              "      <td>1005</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.039063</td>\n",
              "      <td>10.0</td>\n",
              "      <td>5.725399</td>\n",
              "      <td>0.976109</td>\n",
              "      <td>0.045453</td>\n",
              "      <td>1.785602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333158</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15912431</td>\n",
              "      <td>1660036</td>\n",
              "      <td>SNU-81</td>\n",
              "      <td>SIDM00193</td>\n",
              "      <td>COREAD</td>\n",
              "      <td>1531</td>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>EP300, CBP</td>\n",
              "      <td>Chromatin histone acetylation</td>\n",
              "      <td>1005</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.039063</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.930753</td>\n",
              "      <td>0.970851</td>\n",
              "      <td>0.038612</td>\n",
              "      <td>0.637308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333159</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15912739</td>\n",
              "      <td>1674021</td>\n",
              "      <td>SNU-C5</td>\n",
              "      <td>SIDM00498</td>\n",
              "      <td>COREAD</td>\n",
              "      <td>1531</td>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>EP300, CBP</td>\n",
              "      <td>Chromatin histone acetylation</td>\n",
              "      <td>1005</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.039063</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.551784</td>\n",
              "      <td>0.972330</td>\n",
              "      <td>0.042649</td>\n",
              "      <td>0.089683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333160</th>\n",
              "      <td>GDSC1</td>\n",
              "      <td>342</td>\n",
              "      <td>15913046</td>\n",
              "      <td>1789883</td>\n",
              "      <td>DiFi</td>\n",
              "      <td>SIDM00049</td>\n",
              "      <td>COREAD</td>\n",
              "      <td>1531</td>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>EP300, CBP</td>\n",
              "      <td>Chromatin histone acetylation</td>\n",
              "      <td>1005</td>\n",
              "      <td>Y</td>\n",
              "      <td>0.039063</td>\n",
              "      <td>10.0</td>\n",
              "      <td>4.681069</td>\n",
              "      <td>0.980906</td>\n",
              "      <td>0.015312</td>\n",
              "      <td>0.276505</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>333161 rows × 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03661bf6-3b7b-40bb-935b-c6c36f56d284')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03661bf6-3b7b-40bb-935b-c6c36f56d284 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03661bf6-3b7b-40bb-935b-c6c36f56d284');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b8da9b6c-1c51-4cdb-9218-a590db4b28dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b8da9b6c-1c51-4cdb-9218-a590db4b28dc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b8da9b6c-1c51-4cdb-9218-a590db4b28dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4533f460-1129-424c-a6a8-895c5062cc0a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4533f460-1129-424c-a6a8-895c5062cc0a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the distribution of entries by cell line\n",
        "df['CELL_LINE_NAME'].value_counts()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "GdZ-ImtU4eEH",
        "outputId": "c9b3ad99-99a1-443c-9406-362ca88c9b60"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CELL_LINE_NAME\n",
              "SK-MEL-2        402\n",
              "TGW             400\n",
              "MFM-223         400\n",
              "SNU-C1          398\n",
              "COLO-684        398\n",
              "               ... \n",
              "EW-12            41\n",
              "ECC12            32\n",
              "KP-N-RT-BM-1     25\n",
              "CP67-MEL         23\n",
              "NCI-H250          1\n",
              "Name: count, Length: 970, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CELL_LINE_NAME</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>SK-MEL-2</th>\n",
              "      <td>402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TGW</th>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MFM-223</th>\n",
              "      <td>400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SNU-C1</th>\n",
              "      <td>398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>COLO-684</th>\n",
              "      <td>398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EW-12</th>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ECC12</th>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KP-N-RT-BM-1</th>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CP67-MEL</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NCI-H250</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>970 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: sort the table using the string SK-MEL-2 only in the CELL_LINE_NAME column\n",
        "\n",
        "# Filter the DataFrame to include only rows where 'CELL_LINE_NAME' is 'SK-MEL-2'\n",
        "df_sorted = df[df['CELL_LINE_NAME'] == 'SK-MEL-2']\n",
        "\n",
        "# Sort the filtered DataFrame (if needed)\n",
        "# Example: Sort by 'AUC' in ascending order\n",
        "# sk_mel_2_df = sk_mel_2_df.sort_values('AUC')\n",
        "\n",
        "# Print the sorted DataFrame\n",
        "print(df_sorted)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S3wdHyAc4lbu",
        "outputId": "2fbcd0e2-e5a7-43c2-eb91-273f53507dc0"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       DATASET  NLME_RESULT_ID  NLME_CURVE_ID  COSMIC_ID CELL_LINE_NAME  \\\n",
            "86       GDSC1             342       15646269     905955       SK-MEL-2   \n",
            "474      GDSC1             342       15646572     905955       SK-MEL-2   \n",
            "837      GDSC1             342       15646643     905955       SK-MEL-2   \n",
            "1234     GDSC1             342       15646658     905955       SK-MEL-2   \n",
            "1640     GDSC1             342       15646669     905955       SK-MEL-2   \n",
            "...        ...             ...            ...        ...            ...   \n",
            "329242   GDSC1             342       15646465     905955       SK-MEL-2   \n",
            "330105   GDSC1             342       15646466     905955       SK-MEL-2   \n",
            "330945   GDSC1             342       15646467     905955       SK-MEL-2   \n",
            "331660   GDSC1             342       15646469     905955       SK-MEL-2   \n",
            "332493   GDSC1             342       15646470     905955       SK-MEL-2   \n",
            "\n",
            "       SANGER_MODEL_ID TCGA_DESC  DRUG_ID     DRUG_NAME  \\\n",
            "86           SIDM00082      SKCM        1     Erlotinib   \n",
            "474          SIDM00082      SKCM        3     Rapamycin   \n",
            "837          SIDM00082      SKCM        5     Sunitinib   \n",
            "1234         SIDM00082      SKCM        6    PHA-665752   \n",
            "1640         SIDM00082      SKCM        9        MG-132   \n",
            "...                ...       ...      ...           ...   \n",
            "329242       SIDM00082      SKCM     1526   Refametinib   \n",
            "330105       SIDM00082      SKCM     1527    Pictilisib   \n",
            "330945       SIDM00082      SKCM     1529  Pevonedistat   \n",
            "331660       SIDM00082      SKCM     1530         PFI-3   \n",
            "332493       SIDM00082      SKCM     1531      I-CBP112   \n",
            "\n",
            "                            PUTATIVE_TARGET  \\\n",
            "86                                     EGFR   \n",
            "474                                  MTORC1   \n",
            "837     PDGFR, KIT, VEGFR, FLT3, RET, CSF1R   \n",
            "1234                                    MET   \n",
            "1640                      Proteasome, CAPN1   \n",
            "...                                     ...   \n",
            "329242                           MEK1, MEK2   \n",
            "330105                       PI3K (class 1)   \n",
            "330945                                  NAE   \n",
            "331660                PB1, SMARCA4, SMARCA2   \n",
            "332493                           EP300, CBP   \n",
            "\n",
            "                             PATHWAY_NAME  COMPANY_ID WEBRELEASE  MIN_CONC  \\\n",
            "86                         EGFR signaling        1045          Y  0.007813   \n",
            "474                   PI3K/MTOR signaling        1045          Y  0.000391   \n",
            "837                         RTK signaling        1045          Y  0.031250   \n",
            "1234                        RTK signaling        1045          Y  0.007813   \n",
            "1640    Protein stability and degradation        1045          Y  0.003906   \n",
            "...                                   ...         ...        ...       ...   \n",
            "329242                 ERK MAPK signaling        1046          Y  0.019531   \n",
            "330105                PI3K/MTOR signaling        1046          Y  0.015625   \n",
            "330945                              Other        1046          Y  0.003906   \n",
            "331660                    Chromatin other        1025          Y  0.039063   \n",
            "332493      Chromatin histone acetylation        1005          Y  0.039063   \n",
            "\n",
            "        MAX_CONC   LN_IC50       AUC      RMSE   Z_SCORE  \n",
            "86           2.0  3.394001  0.985284  0.032859  0.785492  \n",
            "474          0.1 -1.113085  0.945620  0.135881  0.569712  \n",
            "837          8.0  4.013588  0.970974  0.068558  0.945589  \n",
            "1234         2.0  3.092390  0.980721  0.119597  0.396507  \n",
            "1640         1.0  2.369072  0.980196  0.070962  1.688235  \n",
            "...          ...       ...       ...       ...       ...  \n",
            "329242       5.0 -1.542607  0.441238  0.088111 -1.916767  \n",
            "330105       4.0  1.439194  0.872167  0.081591  0.455946  \n",
            "330945       1.0 -0.809756  0.782186  0.048353 -0.676150  \n",
            "331660      10.0  5.665698  0.991941  0.028880  1.827492  \n",
            "332493      10.0  5.864130  0.993283  0.021091  1.986073  \n",
            "\n",
            "[402 rows x 19 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate a df_sorted to have these columns only: CELL_LINE_NAME, TCGA_DESC, DRUG_NAME, and LN_IC50\n",
        "\n",
        "# Select only the desired columns\n",
        "df_sorted = df_sorted[['CELL_LINE_NAME', 'TCGA_DESC', 'DRUG_NAME', 'LN_IC50']]\n",
        "\n",
        "# Print the updated DataFrame\n",
        "print(df_sorted)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nmh13F2K4sUC",
        "outputId": "768ac5cd-8bfa-4edc-b9e4-bdf73720c9a9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       CELL_LINE_NAME TCGA_DESC     DRUG_NAME   LN_IC50\n",
            "86           SK-MEL-2      SKCM     Erlotinib  3.394001\n",
            "474          SK-MEL-2      SKCM     Rapamycin -1.113085\n",
            "837          SK-MEL-2      SKCM     Sunitinib  4.013588\n",
            "1234         SK-MEL-2      SKCM    PHA-665752  3.092390\n",
            "1640         SK-MEL-2      SKCM        MG-132  2.369072\n",
            "...               ...       ...           ...       ...\n",
            "329242       SK-MEL-2      SKCM   Refametinib -1.542607\n",
            "330105       SK-MEL-2      SKCM    Pictilisib  1.439194\n",
            "330945       SK-MEL-2      SKCM  Pevonedistat -0.809756\n",
            "331660       SK-MEL-2      SKCM         PFI-3  5.665698\n",
            "332493       SK-MEL-2      SKCM      I-CBP112  5.864130\n",
            "\n",
            "[402 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the unique list of drugs from the 'DRUG_NAME' column\n",
        "unique_drugs = df['DRUG_NAME'].unique()\n",
        "\n",
        "# Display the list of drugs\n",
        "unique_drugs\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dbY8BECg45wc",
        "outputId": "be993812-0df7-42df-ba82-29206a4cb3a4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Erlotinib', 'Rapamycin', 'Sunitinib', 'PHA-665752', 'MG-132',\n",
              "       'Paclitaxel', 'Cyclopamine', 'AZ628', 'Sorafenib', 'Tozasertib',\n",
              "       'Imatinib', 'NVP-TAE684', 'Crizotinib', 'Saracatinib',\n",
              "       'S-Trityl-L-cysteine', 'Z-LLNle-CHO', 'Dasatinib', 'GNF-2',\n",
              "       'CGP-60474', 'CGP-082996', 'A-770041', 'WH-4-023', 'WZ-1-84',\n",
              "       'BI-2536', 'BMS-536924', 'BMS-509744', 'CMK', 'Pyrimethamine',\n",
              "       'JW-7-52-1', 'A-443654', 'GW843682X', 'Entinostat', 'Parthenolide',\n",
              "       'GSK319347A', 'TGX221', 'Bortezomib', 'XMD8-85', 'Seliciclib',\n",
              "       'Salubrinal', 'Lapatinib', 'GSK269962A', 'Doxorubicin',\n",
              "       'Etoposide', 'Gemcitabine', 'Mitomycin-C', 'Vinorelbine',\n",
              "       'NSC-87877', 'Bicalutamide', 'QS11', 'CP466722', 'Midostaurin',\n",
              "       'CHIR-99021', 'Ponatinib', 'AZD6482', 'JNK-9L', 'PF-562271',\n",
              "       'HG6-64-1', 'JQ1', 'JQ12', 'DMOG', 'FTI-277', 'OSU-03012',\n",
              "       'Shikonin', 'AKT inhibitor VIII', 'Embelin', 'FH535', 'PAC-1',\n",
              "       'IPA-3', 'GSK650394', 'BAY-61-3606', '5-Fluorouracil',\n",
              "       'Thapsigargin', 'Obatoclax Mesylate', 'BMS-754807', 'Linsitinib',\n",
              "       'Bexarotene', 'Bleomycin', 'LFM-A13', 'GW-2580', 'Luminespib',\n",
              "       'Phenformin', 'Bryostatin 1', 'Pazopanib', 'Dacinostat',\n",
              "       'Epothilone B', 'GSK1904529A', 'BMS-345541', 'Tipifarnib',\n",
              "       'Avagacestat', 'Ruxolitinib', 'AS601245', 'Ispinesib Mesylate',\n",
              "       'TL-2-105', 'AT-7519', 'TAK-715', 'BX-912', 'ZSTK474', 'AS605240',\n",
              "       'Genentech Cpd 10', 'GSK1070916', 'Enzastaurin', 'GSK429286A',\n",
              "       'FMK', 'QL-XII-47', 'IC-87114', 'Idelalisib', 'UNC0638',\n",
              "       'Cabozantinib', 'WZ3105', 'XMD14-99', 'Quizartinib', 'CP724714',\n",
              "       'JW-7-24-1', 'NPK76-II-72-1', 'STF-62247', 'NG-25', 'TL-1-85',\n",
              "       'VX-11e', 'FR-180204', 'ACY-1215', 'Tubastatin A', 'Zibotentan',\n",
              "       'Sepantronium bromide', 'NSC-207895', 'VNLG/124', 'AR-42',\n",
              "       'CUDC-101', 'Belinostat', 'I-BET-762', 'CAY10603', 'Linifanib',\n",
              "       'BIX02189', 'Alectinib', 'Pelitinib', 'Omipalisib', 'JNJ38877605',\n",
              "       'SU11274', 'KIN001-236', 'KIN001-244', 'WHI-P97', 'KIN001-042',\n",
              "       'KIN001-260', 'KIN001-266', 'Masitinib', 'Amuvatinib',\n",
              "       'MPS-1-IN-1', 'NVP-BHG712', 'OSI-930', 'OSI-027', 'CX-5461',\n",
              "       'PHA-793887', 'PI-103', 'PIK-93', 'SB52334', 'TPCA-1',\n",
              "       'Fedratinib', 'Foretinib', 'Y-39983', 'YM201636', 'Tivozanib',\n",
              "       'WYE-125132', 'GSK690693', 'SNX-2112', 'QL-XI-92', 'XMD13-2',\n",
              "       'QL-X-138', 'XMD15-27', 'T0901317', 'Selisistat', 'Tenovin-6',\n",
              "       'THZ-2-49', 'KIN001-270', 'THZ-2-102-1', 'AT7867', 'CI-1033',\n",
              "       'PF-00299804', 'TWS119', 'Torin 2', 'Pilaralisib', 'GSK1059615',\n",
              "       'Voxtalisib', 'Brivanib, BMS-540215', 'BIBF-1120', 'AST-1306',\n",
              "       'Apitolisib', 'LIMK1 inhibitor BMS4', 'kb NB 142-70',\n",
              "       'Sphingosine Kinase 1 Inhibitor II', 'eEF2K Inhibitor, A-484954',\n",
              "       'MetAP2 Inhibitor, A832234', 'Venotoclax', 'CPI-613', 'CAY10566',\n",
              "       'Ara-G', 'Pemetrexed', 'Alisertib', 'Flavopiridol', 'C-75',\n",
              "       'CAP-232, TT-232, TLN-232', 'Trichostatin A', 'Panobinostat',\n",
              "       'LCL161', 'IMD-0354', 'MIM1', 'ETP-45835', 'CD532', 'NSC319726',\n",
              "       'ARRY-520', 'SB505124', 'A-83-01', 'LDN-193189', 'FTY-720', 'BAM7',\n",
              "       'AGI-6780', 'Kobe2602', 'LGK974', 'Wnt-C59', 'RU-SKI 43',\n",
              "       'AICA Ribonucleotide', 'Vinblastine', 'Cisplatin', 'Cytarabine',\n",
              "       'Docetaxel', 'Methotrexate', 'Tretinoin', 'Gefitinib',\n",
              "       'Navitoclax', 'Vorinostat', 'Nilotinib', 'Refametinib', 'CI-1040',\n",
              "       'Temsirolimus', 'Olaparib', 'Veliparib', 'Bosutinib',\n",
              "       'Lenalidomide', 'Axitinib', 'AZD7762', 'GW441756', 'Lestaurtinib',\n",
              "       'SB216763', 'Tanespimycin', 'VX-702', 'Motesanib', 'KU-55933',\n",
              "       'Elesclomol', 'Afatinib', 'Vismodegib', 'PLX-4720', 'BX795',\n",
              "       'NU7441', 'SL0101', 'Doramapimod', 'JNK Inhibitor VIII',\n",
              "       'Wee1 Inhibitor', 'Nutlin-3a (-)', 'Mirin', 'PD173074', 'ZM447439',\n",
              "       'RO-3306', 'MK-2206', 'Palbociclib', 'Dactolisib', 'Pictilisib',\n",
              "       'AZD8055', 'PD0325901', 'SB590885', 'Selumetinib', 'CCT007093',\n",
              "       'EHT-1864', 'CRT0105950', 'CRT0105446', 'Cetuximab', 'FS106',\n",
              "       'PF-4708671', 'Serdemetan', 'AZD4547', 'Capivasertib',\n",
              "       'HG-5-113-01', 'HG-5-88-01', 'THZ-1-87', 'TW 37', 'XMD11-50',\n",
              "       'XMD11-85h', 'ZG-10', 'XMD8-92', 'THZ-2-98-01', 'QL-VIII-58',\n",
              "       'CCT-018159', 'Rucaparib', 'CRT0160829', 'AZ20', 'KU-60019',\n",
              "       'FS112', 'CCT245232', 'CCT245467', 'FY026', 'FY069', 'ZL049',\n",
              "       'FY012', 'Tamoxifen', 'torin2', 'QL-XII-61', 'HG-6-71-01', 'PFI-1',\n",
              "       'IOX2', 'I-BET-151', 'YK-4-279', '(5Z)-7-Oxozeaenol',\n",
              "       'Piperlongumine', 'Daporinad', 'N22899-6-C1', 'N23918-95-7',\n",
              "       'N24798-49-A1', 'GSK-J4', 'Talazoparib', 'rTRAIL', 'UNC1215',\n",
              "       'UNC0642', 'SGC0946', 'ICL1100013', 'XAV939', '965-D2', '993-D2',\n",
              "       'BAY ACCi', 'BAY AKT1', 'BAY-HDAC11_1', 'BAY-HDAC11_2',\n",
              "       'BAY-HDAC11_4', 'BAY-MPS1', 'BAY-MPS-combo-1 (paclitaxel 5 uM)',\n",
              "       'BAY-MPS-combo 2 (paclitaxel 1 uM)', 'Trametinib', 'Dabrafenib',\n",
              "       'Temozolomide', 'Bleomycin (50 uM)', 'ZL109', 'AZD3514',\n",
              "       'Bleomycin (10 uM)', 'AZD6738', 'AZD5438', 'AZD6094',\n",
              "       'Dyrk1b_0191', 'AZD4877', 'EphB4_9721', 'Fulvestrant', 'AZD8931',\n",
              "       'FEN1_3940', 'FGFR_0939', 'FGFR_3831', 'BPTES', 'AZD7969',\n",
              "       'AZD5582', 'IAP_5620', 'IAP_7638', 'IGFR_3801', 'AZD1480',\n",
              "       'JAK1_3715', 'JAK3_7406', 'MCT1_6447', 'MCT4_1422', 'AZD2014',\n",
              "       'AZD8186', 'AZD8835', 'PI3Ka_4409', 'AZD1208', 'PLK_6522',\n",
              "       'RAF_9304', 'PARP_9495', 'PARP_0108', 'PARP_9482', 'TANK_1366',\n",
              "       'AZD1332', 'TTK_3146', 'SN-38', 'Pevonedistat', 'PFI-3',\n",
              "       'I-CBP112'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import pandas as pd\n",
        "import time\n",
        "\n",
        "# Function to get CID from PubChem using drug name\n",
        "def get_cid(drug_name):\n",
        "    url = f\"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/{drug_name}/cids/TXT\"\n",
        "    response = requests.get(url)\n",
        "    if response.status_code == 200:\n",
        "        return response.text.strip()  # Return the CID\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Function to get the canonical SMILES from PubChem for a given CID\n",
        "def get_smiles(cid):\n",
        "    url = f\"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/{cid}/property/CanonicalSMILES/TXT\"\n",
        "    response = requests.get(url)\n",
        "    if response.status_code == 200:\n",
        "        return response.text.strip()  # Return the canonical SMILES\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Your list of drug names\n",
        "drug_names = [\n",
        "    'Erlotinib', 'Rapamycin', 'Sunitinib', 'PHA-665752', 'MG-132', 'Paclitaxel',\n",
        "    'Cyclopamine', 'AZ628', 'Sorafenib', 'Tozasertib', 'Imatinib', 'NVP-TAE684',\n",
        "    'Crizotinib', 'Saracatinib', 'S-Trityl-L-cysteine', 'Z-LLNle-CHO', 'Dasatinib',\n",
        "    'GNF-2', 'CGP-60474', 'CGP-082996', 'A-770041', 'WH-4-023', 'WZ-1-84', 'BI-2536',\n",
        "    'BMS-536924', 'BMS-509744', 'CMK', 'Pyrimethamine', 'JW-7-52-1', 'A-443654',\n",
        "    'GW843682X', 'Entinostat', 'Parthenolide', 'GSK319347A', 'TGX221', 'Bortezomib',\n",
        "    'XMD8-85', 'Seliciclib', 'Salubrinal', 'Lapatinib', 'GSK269962A', 'Doxorubicin',\n",
        "    'Etoposide', 'Gemcitabine', 'Mitomycin-C', 'Vinorelbine', 'NSC-87877', 'Bicalutamide',\n",
        "    'QS11', 'CP466722', 'Midostaurin', 'CHIR-99021', 'Ponatinib', 'AZD6482', 'JNK-9L',\n",
        "    'PF-562271', 'HG6-64-1', 'JQ1', 'JQ12', 'DMOG', 'FTI-277', 'OSU-03012', 'Shikonin',\n",
        "    'AKT inhibitor VIII', 'Embelin', 'FH535', 'PAC-1', 'IPA-3', 'GSK650394', 'BAY-61-3606',\n",
        "    '5-Fluorouracil', 'Thapsigargin', 'Obatoclax Mesylate', 'BMS-754807', 'Linsitinib',\n",
        "    'Bexarotene', 'Bleomycin', 'LFM-A13', 'GW-2580', 'Luminespib', 'Phenformin',\n",
        "    'Bryostatin 1', 'Pazopanib', 'Dacinostat', 'Epothilone B', 'GSK1904529A',\n",
        "    'BMS-345541', 'Tipifarnib', 'Avagacestat', 'Ruxolitinib', 'AS601245', 'Ispinesib Mesylate',\n",
        "    'TL-2-105', 'AT-7519', 'TAK-715', 'BX-912', 'ZSTK474', 'AS605240', 'Genentech Cpd 10',\n",
        "    'GSK1070916', 'Enzastaurin', 'GSK429286A', 'FMK', 'QL-XII-47', 'IC-87114', 'Idelalisib',\n",
        "    'UNC0638', 'Cabozantinib', 'WZ3105', 'XMD14-99', 'Quizartinib', 'CP724714', 'JW-7-24-1',\n",
        "    'NPK76-II-72-1', 'STF-62247', 'NG-25', 'TL-1-85', 'VX-11e', 'FR-180204', 'ACY-1215',\n",
        "    'Tubastatin A', 'Zibotentan', 'Sepantronium bromide', 'NSC-207895', 'VNLG/124', 'AR-42',\n",
        "    'CUDC-101', 'Belinostat', 'I-BET-762', 'CAY10603', 'Linifanib', 'BIX02189', 'Alectinib',\n",
        "    'Pelitinib', 'Omipalisib', 'JNJ38877605', 'SU11274', 'KIN001-236', 'KIN001-244',\n",
        "    'WHI-P97', 'KIN001-042', 'KIN001-260', 'KIN001-266', 'Masitinib', 'Amuvatinib',\n",
        "    'MPS-1-IN-1', 'NVP-BHG712', 'OSI-930', 'OSI-027', 'CX-5461', 'PHA-793887', 'PI-103',\n",
        "    'PIK-93', 'SB52334', 'TPCA-1', 'Fedratinib', 'Foretinib', 'Y-39983', 'YM201636',\n",
        "    'Tivozanib', 'WYE-125132', 'GSK690693', 'SNX-2112', 'QL-XI-92', 'XMD13-2', 'QL-X-138',\n",
        "    'XMD15-27', 'T0901317', 'Selisistat', 'Tenovin-6', 'THZ-2-49', 'KIN001-270',\n",
        "    'THZ-2-102-1', 'AT7867', 'CI-1033', 'PF-00299804', 'TWS119', 'Torin 2', 'Pilaralisib',\n",
        "    'GSK1059615', 'Voxtalisib', 'Brivanib, BMS-540215', 'BIBF-1120', 'AST-1306',\n",
        "    'Apitolisib', 'LIMK1 inhibitor BMS4', 'kb NB 142-70', 'Sphingosine Kinase 1 Inhibitor II',\n",
        "    'eEF2K Inhibitor, A-484954', 'MetAP2 Inhibitor, A832234', 'Venotoclax', 'CPI-613',\n",
        "    'CAY10566', 'Ara-G', 'Pemetrexed', 'Alisertib', 'Flavopiridol', 'C-75', 'CAP-232, TT-232, TLN-232',\n",
        "    'Trichostatin A', 'Panobinostat', 'LCL161', 'IMD-0354', 'MIM1', 'ETP-45835', 'CD532',\n",
        "    'NSC319726', 'ARRY-520', 'SB505124', 'A-83-01', 'LDN-193189', 'FTY-720', 'BAM7',\n",
        "    'AGI-6780', 'Kobe2602', 'LGK974', 'Wnt-C59', 'RU-SKI 43', 'AICA Ribonucleotide',\n",
        "    'Vinblastine', 'Cisplatin', 'Cytarabine', 'Docetaxel', 'Methotrexate', 'Tretinoin',\n",
        "    'Gefitinib', 'Navitoclax', 'Vorinostat', 'Nilotinib', 'Refametinib', 'CI-1040',\n",
        "    'Temsirolimus', 'Olaparib', 'Veliparib', 'Bosutinib', 'Lenalidomide', 'Axitinib',\n",
        "    'AZD7762', 'GW441756', 'Lestaurtinib', 'SB216763', 'Tanespimycin', 'VX-702',\n",
        "    'Motesanib', 'KU-55933', 'Elesclomol', 'Afatinib', 'Vismodegib', 'PLX-4720',\n",
        "    'BX795', 'NU7441', 'SL0101', 'Doramapimod', 'JNK Inhibitor VIII', 'Wee1 Inhibitor',\n",
        "    'Nutlin-3a (-)', 'Mirin', 'PD173074', 'ZM447439', 'RO-3306', 'MK-2206', 'Palbociclib',\n",
        "    'Dactolisib', 'Pictilisib', 'AZD8055', 'PD0325901', 'SB590885', 'Selumetinib',\n",
        "    'CCT007093', 'EHT-1864', 'CRT0105950', 'CRT0105446', 'Cetuximab', 'FS106',\n",
        "    'PF-4708671', 'Serdemetan', 'AZD4547', 'Capivasertib', 'HG-5-113-01', 'HG-5-88-01',\n",
        "    'THZ-1-87', 'TW 37', 'XMD11-50', 'XMD11-85h', 'ZG-10', 'XMD8-92', 'THZ-2-98-01',\n",
        "    'QL-VIII-58', 'CCT-018159', 'Rucaparib', 'CRT0160829', 'AZ20', 'KU-60019', 'FS112',\n",
        "    'CCT245232', 'CCT245467', 'FY026', 'FY069', 'ZL049', 'FY012', 'Tamoxifen', 'torin2',\n",
        "    'QL-XII-61', 'HG-6-71-01', 'PFI-1', 'IOX2', 'I-BET-151', 'YK-4-279', '(5Z)-7-Oxozeaenol',\n",
        "    'Piperlongumine', 'Daporinad', 'N22899-6-C1', 'N23918-95-7', 'N24798-49-A1', 'GSK-J4',\n",
        "    'Talazoparib', 'rTRAIL', 'UNC1215', 'UNC0642', 'SGC0946', 'ICL1100013', 'XAV939',\n",
        "    '965-D2', '993-D2', 'BAY ACCi', 'BAY AKT1', 'BAY-HDAC11_1', 'BAY-HDAC11_2',\n",
        "    'BAY-HDAC11_4', 'BAY-MPS1', 'BAY-MPS-combo-1 (paclitaxel 5 uM)',\n",
        "    'BAY-MPS-combo 2 (paclitaxel 1 uM)', 'Trametinib', 'Dabrafenib', 'Temozolomide',\n",
        "    'Bleomycin (50 uM)', 'ZL109', 'AZD3514', 'Bleomycin (10 uM)', 'AZD6738', 'AZD5438',\n",
        "    'AZD6094', 'Dyrk1b_0191', 'AZD4877', 'EphB4_9721', 'Fulvestrant', 'AZD8931',\n",
        "    'FEN1_3940', 'FGFR_0939', 'FGFR_3831', 'BPTES', 'AZD7969', 'AZD5582', 'IAP_5620',\n",
        "    'IAP_7638', 'IGFR_3801', 'AZD1480', 'JAK1_3715', 'JAK3_7406', 'MCT1_6447', 'MCT4_1422',\n",
        "    'AZD2014', 'AZD8186', 'AZD8835', 'PI3Ka_4409', 'AZD1208', 'PLK_6522', 'RAF_9304',\n",
        "    'PARP_9495', 'PARP_0108', 'PARP_9482', 'TANK_1366', 'AZD1332', 'TTK_3146', 'SN-38',\n",
        "    'Pevonedistat', 'PFI-3', 'I-CBP112'\n",
        "]\n",
        "\n",
        "# Prepare a list to hold the results\n",
        "results = []\n",
        "\n",
        "# Loop over each drug name to get its CID and then its canonical SMILES\n",
        "for drug in drug_names:\n",
        "    try:\n",
        "        cid = get_cid(drug)  # Get the CID for the drug\n",
        "        if cid:\n",
        "            smiles = get_smiles(cid)  # Get the SMILES using the CID\n",
        "            results.append({\"Drug Name\": drug, \"CID\": cid, \"Canonical_SMILES\": smiles})\n",
        "        else:\n",
        "            results.append({\"Drug Name\": drug, \"CID\": None, \"Canonical_SMILES\": None})\n",
        "\n",
        "        # Adding a delay to avoid hitting rate limits on PubChem API\n",
        "        time.sleep(0.2)  # 200 ms delay\n",
        "    except Exception as e:\n",
        "        results.append({\"Drug Name\": drug, \"CID\": None, \"Canonical_SMILES\": None})\n",
        "        print(f\"Error retrieving data for {drug}: {e}\")\n",
        "\n",
        "# Create a pandas DataFrame from the results\n",
        "df_SMILES = pd.DataFrame(results)\n",
        "\n",
        "# Print the DataFrame\n",
        "print(df_SMILES)\n",
        "\n",
        "# Optionally, save the DataFrame to a CSV file\n",
        "df_SMILES.to_csv('drug_smiles.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_1AD3-E7ZH0",
        "outputId": "a1de95a4-a488-4393-caaf-cc36d240b4d6"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        Drug Name       CID                                   Canonical_SMILES\n",
            "0       Erlotinib    176870  COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...\n",
            "1       Rapamycin   5284616  CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...\n",
            "2       Sunitinib   5329102  CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...\n",
            "3      PHA-665752  10461815  CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...\n",
            "4          MG-132    462382  CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...\n",
            "..            ...       ...                                                ...\n",
            "373      TTK_3146      None                                               None\n",
            "374         SN-38    104842  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...\n",
            "375  Pevonedistat  16720766  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...\n",
            "376         PFI-3  78243717       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O\n",
            "377      I-CBP112  90488984  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...\n",
            "\n",
            "[378 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Show all the rows of df_SMILES\n",
        "df_SMILES\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Ew7_lbQC9YIK",
        "outputId": "1e3b27f3-b2dc-4622-c918-53e81e15542a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Drug Name       CID                                   Canonical_SMILES\n",
              "0       Erlotinib    176870  COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...\n",
              "1       Rapamycin   5284616  CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...\n",
              "2       Sunitinib   5329102  CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...\n",
              "3      PHA-665752  10461815  CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...\n",
              "4          MG-132    462382  CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...\n",
              "..            ...       ...                                                ...\n",
              "373      TTK_3146      None                                               None\n",
              "374         SN-38    104842  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...\n",
              "375  Pevonedistat  16720766  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...\n",
              "376         PFI-3  78243717       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O\n",
              "377      I-CBP112  90488984  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...\n",
              "\n",
              "[378 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19ba5fe0-056a-4303-9134-2884cdcd5776\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Drug Name</th>\n",
              "      <th>CID</th>\n",
              "      <th>Canonical_SMILES</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Erlotinib</td>\n",
              "      <td>176870</td>\n",
              "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Rapamycin</td>\n",
              "      <td>5284616</td>\n",
              "      <td>CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sunitinib</td>\n",
              "      <td>5329102</td>\n",
              "      <td>CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>PHA-665752</td>\n",
              "      <td>10461815</td>\n",
              "      <td>CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>MG-132</td>\n",
              "      <td>462382</td>\n",
              "      <td>CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>TTK_3146</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>374</th>\n",
              "      <td>SN-38</td>\n",
              "      <td>104842</td>\n",
              "      <td>CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>375</th>\n",
              "      <td>Pevonedistat</td>\n",
              "      <td>16720766</td>\n",
              "      <td>C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>376</th>\n",
              "      <td>PFI-3</td>\n",
              "      <td>78243717</td>\n",
              "      <td>C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>377</th>\n",
              "      <td>I-CBP112</td>\n",
              "      <td>90488984</td>\n",
              "      <td>CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>378 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19ba5fe0-056a-4303-9134-2884cdcd5776')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19ba5fe0-056a-4303-9134-2884cdcd5776 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19ba5fe0-056a-4303-9134-2884cdcd5776');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-566083e3-7b6a-48ff-9336-5467a17cde02\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-566083e3-7b6a-48ff-9336-5467a17cde02')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-566083e3-7b6a-48ff-9336-5467a17cde02 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_01cd7e7f-24e3-4409-8315-100f96579617\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_SMILES')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_01cd7e7f-24e3-4409-8315-100f96579617 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_SMILES');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_SMILES",
              "summary": "{\n  \"name\": \"df_SMILES\",\n  \"rows\": 378,\n  \"fields\": [\n    {\n      \"column\": \"Drug Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 378,\n        \"samples\": [\n          \"QL-VIII-58\",\n          \"BAY-MPS1\",\n          \"993-D2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 303,\n        \"samples\": [\n          \"5287969\",\n          \"10184653\",\n          \"53340664\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Canonical_SMILES\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 283,\n        \"samples\": [\n          \"CC1=CC(=NN1)NC2=CC(=NC(=N2)SC3=CC=C(C=C3)NC(=O)C4CC4)N5CCN(CC5)C\",\n          \"CC1COCCN1C2=NC(=NC(=C2)C3(CC3)S(=O)(=O)C)C4=C5C=CNC5=CC=C4\",\n          \"C1COCCN1C2=NC(=NC3=C2OC4=C3C=CC=N4)C5=CC(=CC=C5)NC(=O)C6=CN=C(C=C6)N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: remove row with the string None\n",
        "\n",
        "df_SMILES = df_SMILES.dropna(subset=['Canonical_SMILES'])"
      ],
      "metadata": {
        "id": "pu5WaVos9df2"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: concatenate df_SMILES and df_sorted\n",
        "\n",
        "df_merged = pd.merge(df_sorted, df_SMILES, left_on='DRUG_NAME', right_on='Drug Name', how='inner')\n",
        "print(df_merged)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ucON6mg39hqy",
        "outputId": "7e70e782-e1d4-47fd-931a-d0bb5e8bd618"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    CELL_LINE_NAME TCGA_DESC     DRUG_NAME   LN_IC50     Drug Name       CID  \\\n",
            "0         SK-MEL-2      SKCM     Erlotinib  3.394001     Erlotinib    176870   \n",
            "1         SK-MEL-2      SKCM     Rapamycin -1.113085     Rapamycin   5284616   \n",
            "2         SK-MEL-2      SKCM     Sunitinib  4.013588     Sunitinib   5329102   \n",
            "3         SK-MEL-2      SKCM    PHA-665752  3.092390    PHA-665752  10461815   \n",
            "4         SK-MEL-2      SKCM        MG-132  2.369072        MG-132    462382   \n",
            "..             ...       ...           ...       ...           ...       ...   \n",
            "303       SK-MEL-2      SKCM         SN-38 -4.640471         SN-38    104842   \n",
            "304       SK-MEL-2      SKCM         SN-38 -3.770865         SN-38    104842   \n",
            "305       SK-MEL-2      SKCM  Pevonedistat -0.809756  Pevonedistat  16720766   \n",
            "306       SK-MEL-2      SKCM         PFI-3  5.665698         PFI-3  78243717   \n",
            "307       SK-MEL-2      SKCM      I-CBP112  5.864130      I-CBP112  90488984   \n",
            "\n",
            "                                      Canonical_SMILES  \n",
            "0    COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
            "1    CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...  \n",
            "2    CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...  \n",
            "3    CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...  \n",
            "4    CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...  \n",
            "..                                                 ...  \n",
            "303  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...  \n",
            "304  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...  \n",
            "305  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...  \n",
            "306       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O  \n",
            "307  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...  \n",
            "\n",
            "[308 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate table with DRUG_NAME, SMILES, LN_IC50\n",
        "\n",
        "df_filter = df_merged[['DRUG_NAME', 'Canonical_SMILES', 'LN_IC50']]\n",
        "print(df_filter)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jOs2aae49lba",
        "outputId": "4310ca22-f052-4d6e-f888-68d522facf64"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        DRUG_NAME                                   Canonical_SMILES   LN_IC50\n",
            "0       Erlotinib  COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  3.394001\n",
            "1       Rapamycin  CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C... -1.113085\n",
            "2       Sunitinib  CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...  4.013588\n",
            "3      PHA-665752  CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...  3.092390\n",
            "4          MG-132  CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...  2.369072\n",
            "..            ...                                                ...       ...\n",
            "303         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=... -4.640471\n",
            "304         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=... -3.770865\n",
            "305  Pevonedistat  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)... -0.809756\n",
            "306         PFI-3       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O  5.665698\n",
            "307      I-CBP112  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...  5.864130\n",
            "\n",
            "[308 rows x 3 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate lipinksi descriptor table\n",
        "\n",
        "def lipinski(smiles, verbose=False):\n",
        "\n",
        "    moldata= []\n",
        "    for elem in smiles:\n",
        "        mol=Chem.MolFromSmiles(elem)\n",
        "        if mol is None:\n",
        "            return None\n",
        "        moldata.append(mol)\n",
        "\n",
        "    baseData= np.arange(1,1)\n",
        "    i=0\n",
        "    for mol in moldata:\n",
        "\n",
        "        desc_MolWt = Descriptors.MolWt(mol)\n",
        "        desc_MolLogP = Descriptors.MolLogP(mol)\n",
        "        desc_NumHDonors = Lipinski.NumHDonors(mol)\n",
        "        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)\n",
        "\n",
        "        row = np.array([desc_MolWt,\n",
        "                        desc_MolLogP,\n",
        "                        desc_NumHDonors,\n",
        "                        desc_NumHAcceptors])\n",
        "\n",
        "        if(i==0):\n",
        "            baseData=row\n",
        "        else:\n",
        "            baseData=np.vstack([baseData, row])\n",
        "        i=i+1\n",
        "\n",
        "    columnNames=[\"MW\",\"LogP\",\"NumHDonors\",\"NumHAcceptors\"]\n",
        "    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n",
        "\n",
        "    return descriptors"
      ],
      "metadata": {
        "id": "FpIb5h7O9wDW"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate molecular descriptors for df_filter and add descriptor columns to df_filter\n",
        "\n",
        "descriptors = lipinski(df_filter.Canonical_SMILES.values)\n",
        "df_filter = pd.concat([df_filter, descriptors], axis=1)\n",
        "print(df_filter)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tWW7tKTY93xo",
        "outputId": "7bb96f00-b1cd-4538-9984-e48440c09246"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        DRUG_NAME                                   Canonical_SMILES  \\\n",
            "0       Erlotinib  COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
            "1       Rapamycin  CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...   \n",
            "2       Sunitinib  CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...   \n",
            "3      PHA-665752  CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...   \n",
            "4          MG-132  CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...   \n",
            "..            ...                                                ...   \n",
            "303         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...   \n",
            "304         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...   \n",
            "305  Pevonedistat  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...   \n",
            "306         PFI-3       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O   \n",
            "307      I-CBP112  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...   \n",
            "\n",
            "      LN_IC50       MW     LogP  NumHDonors  NumHAcceptors  \n",
            "0    3.394001  393.443  3.40510         1.0            7.0  \n",
            "1   -1.113085  914.187  6.18060         3.0           13.0  \n",
            "2    4.013588  398.482  3.33494         3.0            3.0  \n",
            "3    3.092390  641.621  6.10534         2.0            5.0  \n",
            "4    2.369072  475.630  3.58820         3.0            5.0  \n",
            "..        ...      ...      ...         ...            ...  \n",
            "303 -4.640471  392.411  2.34760         2.0            7.0  \n",
            "304 -3.770865  392.411  2.34760         2.0            7.0  \n",
            "305 -0.809756  443.529  2.06280         3.0            8.0  \n",
            "306  5.665698  321.380  2.44670         1.0            5.0  \n",
            "307  5.864130  468.594  4.22240         0.0            6.0  \n",
            "\n",
            "[308 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: slip data into test and train data 80% and 20%\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Assuming 'df_filter' is your DataFrame with features and target variable\n",
        "X = df_filter.drop('LN_IC50', axis=1)  # Features\n",
        "y = df_filter['LN_IC50']  # Target variable\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Print the shapes of the resulting datasets\n",
        "print(\"X_train shape:\", X_train.shape)\n",
        "print(\"X_test shape:\", X_test.shape)\n",
        "print(\"y_train shape:\", y_train.shape)\n",
        "print(\"y_test shape:\", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mzudS_g_-H1R",
        "outputId": "2cfe9eb8-6fdf-4b55-f5b7-e427388aca9d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (246, 6)\n",
            "X_test shape: (62, 6)\n",
            "y_train shape: (246,)\n",
            "y_test shape: (62,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#install pycaret\n",
        "!pip install pycaret"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WipDLCeb-WWZ",
        "outputId": "e39dd333-6791-413e-8ea9-d2f2b3ef048a"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pycaret in /usr/local/lib/python3.10/dist-packages (3.3.2)\n",
            "Requirement already satisfied: ipython>=5.5.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.6.5 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.7.1)\n",
            "Requirement already satisfied: tqdm>=4.62.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (4.66.5)\n",
            "Requirement already satisfied: numpy<1.27,>=1.21 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.26.4)\n",
            "Requirement already satisfied: pandas<2.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.4)\n",
            "Requirement already satisfied: jinja2>=3 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.1.4)\n",
            "Requirement already satisfied: scipy<=1.11.4,>=1.6.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.11.4)\n",
            "Requirement already satisfied: joblib<1.4,>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.3.2)\n",
            "Requirement already satisfied: scikit-learn>1.4.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.4.2)\n",
            "Requirement already satisfied: pyod>=1.1.3 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.0.2)\n",
            "Requirement already satisfied: imbalanced-learn>=0.12.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.12.4)\n",
            "Requirement already satisfied: category-encoders>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.6.4)\n",
            "Requirement already satisfied: lightgbm>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (4.5.0)\n",
            "Requirement already satisfied: numba>=0.55.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.60.0)\n",
            "Requirement already satisfied: requests>=2.27.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.32.3)\n",
            "Requirement already satisfied: psutil>=5.9.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.9.5)\n",
            "Requirement already satisfied: markupsafe>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.0.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.12.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (8.5.0)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.10.4)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.2.1)\n",
            "Requirement already satisfied: deprecation>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.0)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.5.0)\n",
            "Requirement already satisfied: matplotlib<3.8.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.7.1)\n",
            "Requirement already satisfied: scikit-plot>=0.3.7 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.3.7)\n",
            "Requirement already satisfied: yellowbrick>=1.4 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.5)\n",
            "Requirement already satisfied: plotly>=5.14.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.24.1)\n",
            "Requirement already satisfied: kaleido>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.2.1)\n",
            "Requirement already satisfied: schemdraw==0.15 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.15)\n",
            "Requirement already satisfied: plotly-resampler>=0.8.3.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.10.0)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.14.4)\n",
            "Requirement already satisfied: sktime==0.26.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.26.0)\n",
            "Requirement already satisfied: tbats>=1.1.3 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.1.3)\n",
            "Requirement already satisfied: pmdarima>=2.0.4 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.0.4)\n",
            "Requirement already satisfied: wurlitzer in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.1.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from sktime==0.26.0->pycaret) (24.1)\n",
            "Requirement already satisfied: scikit-base<0.8.0 in /usr/local/lib/python3.10/dist-packages (from sktime==0.26.0->pycaret) (0.7.8)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category-encoders>=2.4.0->pycaret) (0.5.6)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn>=0.12.0->pycaret) (3.5.0)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata>=4.12.0->pycaret) (3.20.2)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (71.0.4)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.19.1)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.7.5)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (5.7.1)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (3.0.48)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (2.18.0)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.1.7)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.9.0)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.6.9)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.0.13)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (1.4.7)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (3.1.4)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<3.8.0->pycaret) (2.8.2)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (2.20.0)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (4.23.0)\n",
            "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (5.7.2)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.55.0->pycaret) (0.43.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.2.0->pycaret) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.2.0->pycaret) (2024.2)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.14.0->pycaret) (9.0.0)\n",
            "Requirement already satisfied: dash>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (2.18.1)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.8.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (3.10.7)\n",
            "Requirement already satisfied: tsdownsample>=0.1.3 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (0.1.3)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima>=2.0.4->pycaret) (3.0.11)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima>=2.0.4->pycaret) (2.2.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (2024.8.30)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.4)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (5.0.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (4.12.2)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.3.4)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (1.6.0)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.3.3)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.5.0->pycaret) (0.8.4)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (24.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.20.0)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core!=5.0.*,>=4.12->nbformat>=4.2.0->pycaret) (4.3.6)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.1->category-encoders>=2.4.0->pycaret) (1.16.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.5.0->pycaret) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.5.0->pycaret) (0.2.13)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.5)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.0)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash>=2.9.0->plotly-resampler>=0.8.3.1->pycaret) (8.1.7)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (24.0.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.1.0)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.4)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.21.0)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.1.0)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.4)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.9.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.12.3)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.1.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.3.0)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.10.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.1)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.2.0)\n",
            "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.10/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.24.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.17.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.6)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.22)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.2.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: train pycaret model\n",
        "\n",
        "from pycaret.regression import *\n",
        "\n",
        "# Prepare the data for PyCaret\n",
        "data_for_pycaret = df_filter\n",
        "data_for_pycaret = data_for_pycaret.drop(['DRUG_NAME', 'Canonical_SMILES'], axis=1)\n",
        "\n",
        "# Setup the PyCaret environment\n",
        "s = setup(data_for_pycaret, target = 'LN_IC50')\n",
        "\n",
        "# Compare different regression models\n",
        "best_model = compare_models()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "189ec4c2ddcb4069a4d6a95c4c5e59d5",
            "06e9e125de6a48af97e43158a5321d47",
            "f4bebaaf370044ae9b3934eeadca562d",
            "285939f52c7f4340b2d1a7dfbaedf690",
            "bcd3d2090939497fae483516c8c1fb12",
            "df62b6b679fd4acc99d339d74fc5de21",
            "668f2ea3f9d34044800ba0013e04a4d4",
            "6019492b7b2f498089232d6959fe28b3",
            "304b33fbad804019826b63cea249fb83",
            "84ccddef2a3d491b9e01c926cfd8d291",
            "e32dc88d7f8047dcacdc8a54d44b4041"
          ]
        },
        "id": "i0rB6zGk-3Ug",
        "outputId": "2134ed98-263c-411c-d70e-3a18b67da703"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7c4adb696020>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_8e544_row8_col1 {\n",
              "  background-color: lightgreen;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_8e544\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_8e544_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
              "      <th id=\"T_8e544_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_8e544_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
              "      <td id=\"T_8e544_row0_col1\" class=\"data row0 col1\" >7058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_8e544_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
              "      <td id=\"T_8e544_row1_col1\" class=\"data row1 col1\" >LN_IC50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_8e544_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
              "      <td id=\"T_8e544_row2_col1\" class=\"data row2 col1\" >Regression</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_8e544_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
              "      <td id=\"T_8e544_row3_col1\" class=\"data row3 col1\" >(308, 5)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_8e544_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
              "      <td id=\"T_8e544_row4_col1\" class=\"data row4 col1\" >(308, 5)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_8e544_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
              "      <td id=\"T_8e544_row5_col1\" class=\"data row5 col1\" >(215, 5)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_8e544_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
              "      <td id=\"T_8e544_row6_col1\" class=\"data row6 col1\" >(93, 5)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_8e544_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
              "      <td id=\"T_8e544_row7_col1\" class=\"data row7 col1\" >4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_8e544_row8_col0\" class=\"data row8 col0\" >Preprocess</td>\n",
              "      <td id=\"T_8e544_row8_col1\" class=\"data row8 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_8e544_row9_col0\" class=\"data row9 col0\" >Imputation type</td>\n",
              "      <td id=\"T_8e544_row9_col1\" class=\"data row9 col1\" >simple</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_8e544_row10_col0\" class=\"data row10 col0\" >Numeric imputation</td>\n",
              "      <td id=\"T_8e544_row10_col1\" class=\"data row10 col1\" >mean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_8e544_row11_col0\" class=\"data row11 col0\" >Categorical imputation</td>\n",
              "      <td id=\"T_8e544_row11_col1\" class=\"data row11 col1\" >mode</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_8e544_row12_col0\" class=\"data row12 col0\" >Fold Generator</td>\n",
              "      <td id=\"T_8e544_row12_col1\" class=\"data row12 col1\" >KFold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_8e544_row13_col0\" class=\"data row13 col0\" >Fold Number</td>\n",
              "      <td id=\"T_8e544_row13_col1\" class=\"data row13 col1\" >10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_8e544_row14_col0\" class=\"data row14 col0\" >CPU Jobs</td>\n",
              "      <td id=\"T_8e544_row14_col1\" class=\"data row14 col1\" >-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_8e544_row15_col0\" class=\"data row15 col0\" >Use GPU</td>\n",
              "      <td id=\"T_8e544_row15_col1\" class=\"data row15 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_8e544_row16_col0\" class=\"data row16 col0\" >Log Experiment</td>\n",
              "      <td id=\"T_8e544_row16_col1\" class=\"data row16 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_8e544_row17_col0\" class=\"data row17 col0\" >Experiment Name</td>\n",
              "      <td id=\"T_8e544_row17_col1\" class=\"data row17 col1\" >reg-default-name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_8e544_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_8e544_row18_col0\" class=\"data row18 col0\" >USI</td>\n",
              "      <td id=\"T_8e544_row18_col1\" class=\"data row18 col1\" >fdfc</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7c4ae4089c60>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_9ae53 th {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_9ae53_row0_col0, #T_9ae53_row0_col1, #T_9ae53_row0_col2, #T_9ae53_row0_col5, #T_9ae53_row0_col6, #T_9ae53_row1_col0, #T_9ae53_row1_col1, #T_9ae53_row1_col2, #T_9ae53_row1_col3, #T_9ae53_row1_col4, #T_9ae53_row1_col5, #T_9ae53_row1_col6, #T_9ae53_row2_col0, #T_9ae53_row2_col1, #T_9ae53_row2_col2, #T_9ae53_row2_col3, #T_9ae53_row2_col4, #T_9ae53_row2_col5, #T_9ae53_row2_col6, #T_9ae53_row3_col0, #T_9ae53_row3_col1, #T_9ae53_row3_col3, #T_9ae53_row3_col4, #T_9ae53_row3_col5, #T_9ae53_row3_col6, #T_9ae53_row4_col0, #T_9ae53_row4_col1, #T_9ae53_row4_col2, #T_9ae53_row4_col3, #T_9ae53_row4_col4, #T_9ae53_row4_col5, #T_9ae53_row4_col6, #T_9ae53_row5_col0, #T_9ae53_row5_col1, #T_9ae53_row5_col2, #T_9ae53_row5_col3, #T_9ae53_row5_col4, #T_9ae53_row5_col5, #T_9ae53_row5_col6, #T_9ae53_row6_col0, #T_9ae53_row6_col2, #T_9ae53_row6_col3, #T_9ae53_row6_col4, #T_9ae53_row6_col5, #T_9ae53_row6_col6, #T_9ae53_row7_col0, #T_9ae53_row7_col1, #T_9ae53_row7_col2, #T_9ae53_row7_col3, #T_9ae53_row7_col4, #T_9ae53_row7_col5, #T_9ae53_row7_col6, #T_9ae53_row8_col0, #T_9ae53_row8_col1, #T_9ae53_row8_col2, #T_9ae53_row8_col3, #T_9ae53_row8_col4, #T_9ae53_row8_col5, #T_9ae53_row8_col6, #T_9ae53_row9_col0, #T_9ae53_row9_col1, #T_9ae53_row9_col2, #T_9ae53_row9_col3, #T_9ae53_row9_col4, #T_9ae53_row9_col5, #T_9ae53_row9_col6, #T_9ae53_row10_col0, #T_9ae53_row10_col1, #T_9ae53_row10_col2, #T_9ae53_row10_col3, #T_9ae53_row10_col4, #T_9ae53_row10_col6, #T_9ae53_row11_col0, #T_9ae53_row11_col1, #T_9ae53_row11_col2, #T_9ae53_row11_col3, #T_9ae53_row11_col4, #T_9ae53_row11_col5, #T_9ae53_row11_col6, #T_9ae53_row12_col0, #T_9ae53_row12_col1, #T_9ae53_row12_col2, #T_9ae53_row12_col3, #T_9ae53_row12_col4, #T_9ae53_row12_col5, #T_9ae53_row12_col6, #T_9ae53_row13_col0, #T_9ae53_row13_col1, #T_9ae53_row13_col2, #T_9ae53_row13_col3, #T_9ae53_row13_col4, #T_9ae53_row13_col5, #T_9ae53_row13_col6, #T_9ae53_row14_col0, #T_9ae53_row14_col1, #T_9ae53_row14_col2, #T_9ae53_row14_col3, #T_9ae53_row14_col4, #T_9ae53_row14_col5, #T_9ae53_row15_col0, #T_9ae53_row15_col1, #T_9ae53_row15_col2, #T_9ae53_row15_col3, #T_9ae53_row15_col4, #T_9ae53_row15_col5, #T_9ae53_row15_col6, #T_9ae53_row16_col0, #T_9ae53_row16_col1, #T_9ae53_row16_col2, #T_9ae53_row16_col3, #T_9ae53_row16_col4, #T_9ae53_row16_col5, #T_9ae53_row16_col6, #T_9ae53_row17_col0, #T_9ae53_row17_col1, #T_9ae53_row17_col2, #T_9ae53_row17_col3, #T_9ae53_row17_col4, #T_9ae53_row17_col5, #T_9ae53_row17_col6, #T_9ae53_row18_col0, #T_9ae53_row18_col1, #T_9ae53_row18_col2, #T_9ae53_row18_col3, #T_9ae53_row18_col4, #T_9ae53_row18_col5, #T_9ae53_row18_col6 {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_9ae53_row0_col3, #T_9ae53_row0_col4, #T_9ae53_row3_col2, #T_9ae53_row6_col1, #T_9ae53_row10_col5, #T_9ae53_row14_col6 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "}\n",
              "#T_9ae53_row0_col7, #T_9ae53_row1_col7, #T_9ae53_row2_col7, #T_9ae53_row3_col7, #T_9ae53_row4_col7, #T_9ae53_row5_col7, #T_9ae53_row6_col7, #T_9ae53_row7_col7, #T_9ae53_row8_col7, #T_9ae53_row9_col7, #T_9ae53_row11_col7, #T_9ae53_row12_col7, #T_9ae53_row13_col7, #T_9ae53_row14_col7, #T_9ae53_row15_col7, #T_9ae53_row16_col7, #T_9ae53_row17_col7, #T_9ae53_row18_col7 {\n",
              "  text-align: left;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "#T_9ae53_row10_col7 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_9ae53\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_9ae53_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
              "      <th id=\"T_9ae53_level0_col1\" class=\"col_heading level0 col1\" >MAE</th>\n",
              "      <th id=\"T_9ae53_level0_col2\" class=\"col_heading level0 col2\" >MSE</th>\n",
              "      <th id=\"T_9ae53_level0_col3\" class=\"col_heading level0 col3\" >RMSE</th>\n",
              "      <th id=\"T_9ae53_level0_col4\" class=\"col_heading level0 col4\" >R2</th>\n",
              "      <th id=\"T_9ae53_level0_col5\" class=\"col_heading level0 col5\" >RMSLE</th>\n",
              "      <th id=\"T_9ae53_level0_col6\" class=\"col_heading level0 col6\" >MAPE</th>\n",
              "      <th id=\"T_9ae53_level0_col7\" class=\"col_heading level0 col7\" >TT (Sec)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row0\" class=\"row_heading level0 row0\" >rf</th>\n",
              "      <td id=\"T_9ae53_row0_col0\" class=\"data row0 col0\" >Random Forest Regressor</td>\n",
              "      <td id=\"T_9ae53_row0_col1\" class=\"data row0 col1\" >2.1131</td>\n",
              "      <td id=\"T_9ae53_row0_col2\" class=\"data row0 col2\" >7.2184</td>\n",
              "      <td id=\"T_9ae53_row0_col3\" class=\"data row0 col3\" >2.6436</td>\n",
              "      <td id=\"T_9ae53_row0_col4\" class=\"data row0 col4\" >0.0085</td>\n",
              "      <td id=\"T_9ae53_row0_col5\" class=\"data row0 col5\" >0.6223</td>\n",
              "      <td id=\"T_9ae53_row0_col6\" class=\"data row0 col6\" >1.7692</td>\n",
              "      <td id=\"T_9ae53_row0_col7\" class=\"data row0 col7\" >0.2030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row1\" class=\"row_heading level0 row1\" >lasso</th>\n",
              "      <td id=\"T_9ae53_row1_col0\" class=\"data row1 col0\" >Lasso Regression</td>\n",
              "      <td id=\"T_9ae53_row1_col1\" class=\"data row1 col1\" >2.1075</td>\n",
              "      <td id=\"T_9ae53_row1_col2\" class=\"data row1 col2\" >7.1521</td>\n",
              "      <td id=\"T_9ae53_row1_col3\" class=\"data row1 col3\" >2.6558</td>\n",
              "      <td id=\"T_9ae53_row1_col4\" class=\"data row1 col4\" >0.0058</td>\n",
              "      <td id=\"T_9ae53_row1_col5\" class=\"data row1 col5\" >0.5284</td>\n",
              "      <td id=\"T_9ae53_row1_col6\" class=\"data row1 col6\" >1.6151</td>\n",
              "      <td id=\"T_9ae53_row1_col7\" class=\"data row1 col7\" >0.0300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row2\" class=\"row_heading level0 row2\" >llar</th>\n",
              "      <td id=\"T_9ae53_row2_col0\" class=\"data row2 col0\" >Lasso Least Angle Regression</td>\n",
              "      <td id=\"T_9ae53_row2_col1\" class=\"data row2 col1\" >2.1075</td>\n",
              "      <td id=\"T_9ae53_row2_col2\" class=\"data row2 col2\" >7.1521</td>\n",
              "      <td id=\"T_9ae53_row2_col3\" class=\"data row2 col3\" >2.6558</td>\n",
              "      <td id=\"T_9ae53_row2_col4\" class=\"data row2 col4\" >0.0058</td>\n",
              "      <td id=\"T_9ae53_row2_col5\" class=\"data row2 col5\" >0.5284</td>\n",
              "      <td id=\"T_9ae53_row2_col6\" class=\"data row2 col6\" >1.6151</td>\n",
              "      <td id=\"T_9ae53_row2_col7\" class=\"data row2 col7\" >0.0220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row3\" class=\"row_heading level0 row3\" >omp</th>\n",
              "      <td id=\"T_9ae53_row3_col0\" class=\"data row3 col0\" >Orthogonal Matching Pursuit</td>\n",
              "      <td id=\"T_9ae53_row3_col1\" class=\"data row3 col1\" >2.1074</td>\n",
              "      <td id=\"T_9ae53_row3_col2\" class=\"data row3 col2\" >7.1514</td>\n",
              "      <td id=\"T_9ae53_row3_col3\" class=\"data row3 col3\" >2.6557</td>\n",
              "      <td id=\"T_9ae53_row3_col4\" class=\"data row3 col4\" >0.0057</td>\n",
              "      <td id=\"T_9ae53_row3_col5\" class=\"data row3 col5\" >0.5295</td>\n",
              "      <td id=\"T_9ae53_row3_col6\" class=\"data row3 col6\" >1.6163</td>\n",
              "      <td id=\"T_9ae53_row3_col7\" class=\"data row3 col7\" >0.0210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row4\" class=\"row_heading level0 row4\" >br</th>\n",
              "      <td id=\"T_9ae53_row4_col0\" class=\"data row4 col0\" >Bayesian Ridge</td>\n",
              "      <td id=\"T_9ae53_row4_col1\" class=\"data row4 col1\" >2.1081</td>\n",
              "      <td id=\"T_9ae53_row4_col2\" class=\"data row4 col2\" >7.1609</td>\n",
              "      <td id=\"T_9ae53_row4_col3\" class=\"data row4 col3\" >2.6575</td>\n",
              "      <td id=\"T_9ae53_row4_col4\" class=\"data row4 col4\" >0.0052</td>\n",
              "      <td id=\"T_9ae53_row4_col5\" class=\"data row4 col5\" >0.5240</td>\n",
              "      <td id=\"T_9ae53_row4_col6\" class=\"data row4 col6\" >1.6096</td>\n",
              "      <td id=\"T_9ae53_row4_col7\" class=\"data row4 col7\" >0.0230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row5\" class=\"row_heading level0 row5\" >en</th>\n",
              "      <td id=\"T_9ae53_row5_col0\" class=\"data row5 col0\" >Elastic Net</td>\n",
              "      <td id=\"T_9ae53_row5_col1\" class=\"data row5 col1\" >2.1107</td>\n",
              "      <td id=\"T_9ae53_row5_col2\" class=\"data row5 col2\" >7.1755</td>\n",
              "      <td id=\"T_9ae53_row5_col3\" class=\"data row5 col3\" >2.6601</td>\n",
              "      <td id=\"T_9ae53_row5_col4\" class=\"data row5 col4\" >0.0021</td>\n",
              "      <td id=\"T_9ae53_row5_col5\" class=\"data row5 col5\" >0.5306</td>\n",
              "      <td id=\"T_9ae53_row5_col6\" class=\"data row5 col6\" >1.6153</td>\n",
              "      <td id=\"T_9ae53_row5_col7\" class=\"data row5 col7\" >0.0270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row6\" class=\"row_heading level0 row6\" >ridge</th>\n",
              "      <td id=\"T_9ae53_row6_col0\" class=\"data row6 col0\" >Ridge Regression</td>\n",
              "      <td id=\"T_9ae53_row6_col1\" class=\"data row6 col1\" >2.0958</td>\n",
              "      <td id=\"T_9ae53_row6_col2\" class=\"data row6 col2\" >7.1992</td>\n",
              "      <td id=\"T_9ae53_row6_col3\" class=\"data row6 col3\" >2.6607</td>\n",
              "      <td id=\"T_9ae53_row6_col4\" class=\"data row6 col4\" >-0.0002</td>\n",
              "      <td id=\"T_9ae53_row6_col5\" class=\"data row6 col5\" >0.5527</td>\n",
              "      <td id=\"T_9ae53_row6_col6\" class=\"data row6 col6\" >1.6149</td>\n",
              "      <td id=\"T_9ae53_row6_col7\" class=\"data row6 col7\" >0.0210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row7\" class=\"row_heading level0 row7\" >lar</th>\n",
              "      <td id=\"T_9ae53_row7_col0\" class=\"data row7 col0\" >Least Angle Regression</td>\n",
              "      <td id=\"T_9ae53_row7_col1\" class=\"data row7 col1\" >2.0959</td>\n",
              "      <td id=\"T_9ae53_row7_col2\" class=\"data row7 col2\" >7.2002</td>\n",
              "      <td id=\"T_9ae53_row7_col3\" class=\"data row7 col3\" >2.6609</td>\n",
              "      <td id=\"T_9ae53_row7_col4\" class=\"data row7 col4\" >-0.0003</td>\n",
              "      <td id=\"T_9ae53_row7_col5\" class=\"data row7 col5\" >0.5529</td>\n",
              "      <td id=\"T_9ae53_row7_col6\" class=\"data row7 col6\" >1.6150</td>\n",
              "      <td id=\"T_9ae53_row7_col7\" class=\"data row7 col7\" >0.0220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row8\" class=\"row_heading level0 row8\" >lr</th>\n",
              "      <td id=\"T_9ae53_row8_col0\" class=\"data row8 col0\" >Linear Regression</td>\n",
              "      <td id=\"T_9ae53_row8_col1\" class=\"data row8 col1\" >2.0959</td>\n",
              "      <td id=\"T_9ae53_row8_col2\" class=\"data row8 col2\" >7.2002</td>\n",
              "      <td id=\"T_9ae53_row8_col3\" class=\"data row8 col3\" >2.6609</td>\n",
              "      <td id=\"T_9ae53_row8_col4\" class=\"data row8 col4\" >-0.0003</td>\n",
              "      <td id=\"T_9ae53_row8_col5\" class=\"data row8 col5\" >0.5529</td>\n",
              "      <td id=\"T_9ae53_row8_col6\" class=\"data row8 col6\" >1.6150</td>\n",
              "      <td id=\"T_9ae53_row8_col7\" class=\"data row8 col7\" >0.8220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row9\" class=\"row_heading level0 row9\" >huber</th>\n",
              "      <td id=\"T_9ae53_row9_col0\" class=\"data row9 col0\" >Huber Regressor</td>\n",
              "      <td id=\"T_9ae53_row9_col1\" class=\"data row9 col1\" >2.0968</td>\n",
              "      <td id=\"T_9ae53_row9_col2\" class=\"data row9 col2\" >7.3704</td>\n",
              "      <td id=\"T_9ae53_row9_col3\" class=\"data row9 col3\" >2.6928</td>\n",
              "      <td id=\"T_9ae53_row9_col4\" class=\"data row9 col4\" >-0.0275</td>\n",
              "      <td id=\"T_9ae53_row9_col5\" class=\"data row9 col5\" >0.5390</td>\n",
              "      <td id=\"T_9ae53_row9_col6\" class=\"data row9 col6\" >1.8223</td>\n",
              "      <td id=\"T_9ae53_row9_col7\" class=\"data row9 col7\" >0.0440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row10\" class=\"row_heading level0 row10\" >dummy</th>\n",
              "      <td id=\"T_9ae53_row10_col0\" class=\"data row10 col0\" >Dummy Regressor</td>\n",
              "      <td id=\"T_9ae53_row10_col1\" class=\"data row10 col1\" >2.1486</td>\n",
              "      <td id=\"T_9ae53_row10_col2\" class=\"data row10 col2\" >7.5425</td>\n",
              "      <td id=\"T_9ae53_row10_col3\" class=\"data row10 col3\" >2.7246</td>\n",
              "      <td id=\"T_9ae53_row10_col4\" class=\"data row10 col4\" >-0.0380</td>\n",
              "      <td id=\"T_9ae53_row10_col5\" class=\"data row10 col5\" >0.5075</td>\n",
              "      <td id=\"T_9ae53_row10_col6\" class=\"data row10 col6\" >1.5704</td>\n",
              "      <td id=\"T_9ae53_row10_col7\" class=\"data row10 col7\" >0.0200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row11\" class=\"row_heading level0 row11\" >lightgbm</th>\n",
              "      <td id=\"T_9ae53_row11_col0\" class=\"data row11 col0\" >Light Gradient Boosting Machine</td>\n",
              "      <td id=\"T_9ae53_row11_col1\" class=\"data row11 col1\" >2.1936</td>\n",
              "      <td id=\"T_9ae53_row11_col2\" class=\"data row11 col2\" >7.7876</td>\n",
              "      <td id=\"T_9ae53_row11_col3\" class=\"data row11 col3\" >2.7564</td>\n",
              "      <td id=\"T_9ae53_row11_col4\" class=\"data row11 col4\" >-0.0710</td>\n",
              "      <td id=\"T_9ae53_row11_col5\" class=\"data row11 col5\" >0.6497</td>\n",
              "      <td id=\"T_9ae53_row11_col6\" class=\"data row11 col6\" >1.9260</td>\n",
              "      <td id=\"T_9ae53_row11_col7\" class=\"data row11 col7\" >0.1950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row12\" class=\"row_heading level0 row12\" >et</th>\n",
              "      <td id=\"T_9ae53_row12_col0\" class=\"data row12 col0\" >Extra Trees Regressor</td>\n",
              "      <td id=\"T_9ae53_row12_col1\" class=\"data row12 col1\" >2.2280</td>\n",
              "      <td id=\"T_9ae53_row12_col2\" class=\"data row12 col2\" >8.1397</td>\n",
              "      <td id=\"T_9ae53_row12_col3\" class=\"data row12 col3\" >2.8141</td>\n",
              "      <td id=\"T_9ae53_row12_col4\" class=\"data row12 col4\" >-0.1136</td>\n",
              "      <td id=\"T_9ae53_row12_col5\" class=\"data row12 col5\" >0.6455</td>\n",
              "      <td id=\"T_9ae53_row12_col6\" class=\"data row12 col6\" >1.9286</td>\n",
              "      <td id=\"T_9ae53_row12_col7\" class=\"data row12 col7\" >0.1910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row13\" class=\"row_heading level0 row13\" >knn</th>\n",
              "      <td id=\"T_9ae53_row13_col0\" class=\"data row13 col0\" >K Neighbors Regressor</td>\n",
              "      <td id=\"T_9ae53_row13_col1\" class=\"data row13 col1\" >2.2682</td>\n",
              "      <td id=\"T_9ae53_row13_col2\" class=\"data row13 col2\" >8.0487</td>\n",
              "      <td id=\"T_9ae53_row13_col3\" class=\"data row13 col3\" >2.8076</td>\n",
              "      <td id=\"T_9ae53_row13_col4\" class=\"data row13 col4\" >-0.1235</td>\n",
              "      <td id=\"T_9ae53_row13_col5\" class=\"data row13 col5\" >0.6237</td>\n",
              "      <td id=\"T_9ae53_row13_col6\" class=\"data row13 col6\" >1.6806</td>\n",
              "      <td id=\"T_9ae53_row13_col7\" class=\"data row13 col7\" >0.0320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row14\" class=\"row_heading level0 row14\" >ada</th>\n",
              "      <td id=\"T_9ae53_row14_col0\" class=\"data row14 col0\" >AdaBoost Regressor</td>\n",
              "      <td id=\"T_9ae53_row14_col1\" class=\"data row14 col1\" >2.3050</td>\n",
              "      <td id=\"T_9ae53_row14_col2\" class=\"data row14 col2\" >8.1739</td>\n",
              "      <td id=\"T_9ae53_row14_col3\" class=\"data row14 col3\" >2.8296</td>\n",
              "      <td id=\"T_9ae53_row14_col4\" class=\"data row14 col4\" >-0.1393</td>\n",
              "      <td id=\"T_9ae53_row14_col5\" class=\"data row14 col5\" >0.6482</td>\n",
              "      <td id=\"T_9ae53_row14_col6\" class=\"data row14 col6\" >1.4543</td>\n",
              "      <td id=\"T_9ae53_row14_col7\" class=\"data row14 col7\" >0.1010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row15\" class=\"row_heading level0 row15\" >gbr</th>\n",
              "      <td id=\"T_9ae53_row15_col0\" class=\"data row15 col0\" >Gradient Boosting Regressor</td>\n",
              "      <td id=\"T_9ae53_row15_col1\" class=\"data row15 col1\" >2.2000</td>\n",
              "      <td id=\"T_9ae53_row15_col2\" class=\"data row15 col2\" >8.2069</td>\n",
              "      <td id=\"T_9ae53_row15_col3\" class=\"data row15 col3\" >2.8309</td>\n",
              "      <td id=\"T_9ae53_row15_col4\" class=\"data row15 col4\" >-0.1703</td>\n",
              "      <td id=\"T_9ae53_row15_col5\" class=\"data row15 col5\" >0.6076</td>\n",
              "      <td id=\"T_9ae53_row15_col6\" class=\"data row15 col6\" >1.8564</td>\n",
              "      <td id=\"T_9ae53_row15_col7\" class=\"data row15 col7\" >0.2910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row16\" class=\"row_heading level0 row16\" >xgboost</th>\n",
              "      <td id=\"T_9ae53_row16_col0\" class=\"data row16 col0\" >Extreme Gradient Boosting</td>\n",
              "      <td id=\"T_9ae53_row16_col1\" class=\"data row16 col1\" >2.3066</td>\n",
              "      <td id=\"T_9ae53_row16_col2\" class=\"data row16 col2\" >9.2631</td>\n",
              "      <td id=\"T_9ae53_row16_col3\" class=\"data row16 col3\" >2.9924</td>\n",
              "      <td id=\"T_9ae53_row16_col4\" class=\"data row16 col4\" >-0.2867</td>\n",
              "      <td id=\"T_9ae53_row16_col5\" class=\"data row16 col5\" >0.6469</td>\n",
              "      <td id=\"T_9ae53_row16_col6\" class=\"data row16 col6\" >2.0578</td>\n",
              "      <td id=\"T_9ae53_row16_col7\" class=\"data row16 col7\" >0.2050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row17\" class=\"row_heading level0 row17\" >dt</th>\n",
              "      <td id=\"T_9ae53_row17_col0\" class=\"data row17 col0\" >Decision Tree Regressor</td>\n",
              "      <td id=\"T_9ae53_row17_col1\" class=\"data row17 col1\" >2.9468</td>\n",
              "      <td id=\"T_9ae53_row17_col2\" class=\"data row17 col2\" >14.5251</td>\n",
              "      <td id=\"T_9ae53_row17_col3\" class=\"data row17 col3\" >3.7592</td>\n",
              "      <td id=\"T_9ae53_row17_col4\" class=\"data row17 col4\" >-1.0168</td>\n",
              "      <td id=\"T_9ae53_row17_col5\" class=\"data row17 col5\" >0.7346</td>\n",
              "      <td id=\"T_9ae53_row17_col6\" class=\"data row17 col6\" >2.5530</td>\n",
              "      <td id=\"T_9ae53_row17_col7\" class=\"data row17 col7\" >0.0240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_9ae53_level0_row18\" class=\"row_heading level0 row18\" >par</th>\n",
              "      <td id=\"T_9ae53_row18_col0\" class=\"data row18 col0\" >Passive Aggressive Regressor</td>\n",
              "      <td id=\"T_9ae53_row18_col1\" class=\"data row18 col1\" >3.2595</td>\n",
              "      <td id=\"T_9ae53_row18_col2\" class=\"data row18 col2\" >14.8023</td>\n",
              "      <td id=\"T_9ae53_row18_col3\" class=\"data row18 col3\" >3.7643</td>\n",
              "      <td id=\"T_9ae53_row18_col4\" class=\"data row18 col4\" >-1.2519</td>\n",
              "      <td id=\"T_9ae53_row18_col5\" class=\"data row18 col5\" >0.8813</td>\n",
              "      <td id=\"T_9ae53_row18_col6\" class=\"data row18 col6\" >2.2826</td>\n",
              "      <td id=\"T_9ae53_row18_col7\" class=\"data row18 col7\" >0.0210</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/81 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "189ec4c2ddcb4069a4d6a95c4c5e59d5"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/2b70e893a8ba7c0f/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: evaluate ridge regression on X_test and Y_test usig 3 metrics\n",
        "\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "\n",
        "# Create a Ridge Regression model\n",
        "ridge_model = Ridge()\n",
        "\n",
        "# Train the model on the training data\n",
        "ridge_model.fit(X_train.drop(['DRUG_NAME', 'Canonical_SMILES'], axis=1), y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred = ridge_model.predict(X_test.drop(['DRUG_NAME', 'Canonical_SMILES'], axis=1))\n",
        "\n",
        "# Calculate the evaluation metrics\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "# Print the results\n",
        "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
        "print(f\"R-squared (R2): {r2:.4f}\")\n",
        "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "egsrvZB-E08g",
        "outputId": "4493389f-36b6-4994-d3ca-62a32f6e9a0b"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error (MSE): 7.6088\n",
            "R-squared (R2): 0.1266\n",
            "Mean Absolute Error (MAE): 2.1371\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: use ridge regression to predict the IC50 on df_filter\n",
        "\n",
        "# Assuming X_test and ridge_model are already defined from the preceding code.\n",
        "\n",
        "# Select features for prediction from df_filter\n",
        "X_pred = df_filter.drop(['LN_IC50', 'DRUG_NAME', 'Canonical_SMILES'], axis=1)\n",
        "\n",
        "# Make predictions using the Ridge regression model\n",
        "y_pred_filter = ridge_model.predict(X_pred)\n",
        "\n",
        "# Add the predicted IC50 values to the df_filter DataFrame\n",
        "df_filter['Predicted_IC50'] = y_pred_filter\n",
        "\n",
        "# Print the DataFrame with predicted IC50 values\n",
        "print(df_filter)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tine7isKE84E",
        "outputId": "ddebf411-d20c-49a2-9ac2-c6d30e17c98b"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        DRUG_NAME                                   Canonical_SMILES  \\\n",
            "0       Erlotinib  COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
            "1       Rapamycin  CC1CCC2CC(C(=CC=CC=CC(CC(C(=O)C(C(C(=CC(C(=O)C...   \n",
            "2       Sunitinib  CCN(CC)CCNC(=O)C1=C(NC(=C1C)C=C2C3=C(C=CC(=C3)...   \n",
            "3      PHA-665752  CC1=C(NC(=C1C(=O)N2CCCC2CN3CCCC3)C)C=C4C5=C(C=...   \n",
            "4          MG-132  CC(C)CC(C=O)NC(=O)C(CC(C)C)NC(=O)C(CC(C)C)NC(=...   \n",
            "..            ...                                                ...   \n",
            "303         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...   \n",
            "304         SN-38  CCC1=C2CN3C(=CC4=C(C3=O)COC(=O)C4(CC)O)C2=NC5=...   \n",
            "305  Pevonedistat  C1CC2=CC=CC=C2C1NC3=C4C=CN(C4=NC=N3)C5CC(C(C5)...   \n",
            "306         PFI-3       C1C2CN(C1CN2C3=CC=CC=N3)C=CC(=O)C4=CC=CC=C4O   \n",
            "307      I-CBP112  CCC(=O)N1CCOC2=C(C1)C=C(C=C2OCC3CCCN(C3)C)C4=C...   \n",
            "\n",
            "      LN_IC50       MW     LogP  NumHDonors  NumHAcceptors  Predicted_IC50  \n",
            "0    3.394001  393.443  3.40510         1.0            7.0        2.666863  \n",
            "1   -1.113085  914.187  6.18060         3.0           13.0       -0.177717  \n",
            "2    4.013588  398.482  3.33494         3.0            3.0        1.963319  \n",
            "3    3.092390  641.621  6.10534         2.0            5.0        1.352397  \n",
            "4    2.369072  475.630  3.58820         3.0            5.0        1.629226  \n",
            "..        ...      ...      ...         ...            ...             ...  \n",
            "303 -4.640471  392.411  2.34760         2.0            7.0        2.186768  \n",
            "304 -3.770865  392.411  2.34760         2.0            7.0        2.186768  \n",
            "305 -0.809756  443.529  2.06280         3.0            8.0        1.631408  \n",
            "306  5.665698  321.380  2.44670         1.0            5.0        2.757872  \n",
            "307  5.864130  468.594  4.22240         0.0            6.0        2.471518  \n",
            "\n",
            "[308 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: create a scatter plot from predicted IC50 and actual IC50 make it colourful and creative\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Create a scatter plot with a colorful and creative design\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x='LN_IC50', y='Predicted_IC50', data=df_filter, hue='LN_IC50', palette='viridis', size='LN_IC50', sizes=(20, 200))\n",
        "\n",
        "# Customize the plot\n",
        "plt.title('Actual IC50 vs Predicted IC50', fontsize=16)\n",
        "plt.xlabel('Actual IC50', fontsize=14)\n",
        "plt.ylabel('Predicted IC50', fontsize=14)\n",
        "plt.grid(True, linestyle='--', alpha=0.5)\n",
        "\n",
        "\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "m80QhkkyFPL9",
        "outputId": "c7c5f798-2ef0-46c6-dc2b-56ffdf38eb4f"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate the correlation coefficient for the scatter plot\n",
        "\n",
        "correlation_coefficient = df_filter['LN_IC50'].corr(df_filter['Predicted_IC50'])\n",
        "\n",
        "print(f\"Correlation Coefficient: {correlation_coefficient:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LaLns_QOFcw_",
        "outputId": "d1cb6705-cc1f-4f4e-b409-6d8e4bcab676"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation Coefficient: 0.2803\n"
          ]
        }
      ]
    }
  ]
}